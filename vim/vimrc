set nocompatible

call plug#begin()

Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-speeddating'
Plug 'tpope/vim-repeat'

Plug 'scrooloose/syntastic'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/nerdcommenter'

Plug 'ervandew/supertab'
Plug 'davidhalter/jedi-vim', {'for': 'python'}

Plug 'nosami/Omnisharp', {'for': 'cs', 'do': 'cd server && xbuild'}
"Plug 'Shougo/neocomplete.vim'
"Plug 'kien/ctrlp.vim'

Plug 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}

Plug 'godlygeek/tabular'

Plug 'flazz/vim-colorschemes'
"Plug 'altercation/vim-colors-solarized'
"Plug 'tomasr/molokai'

Plug 'ShowTrailingWhitespace'

Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'

Plug 'futek/vim-anb-syntax'

call plug#end()

" general
filetype plugin indent on
syntax enable
set encoding=utf-8
set t_Co=256
set termencoding=utf-8
if !has("gui_running")
	set term=xterm-256color
endif
set shell=/bin/bash
set history=1000
set autoread
set timeoutlen=500
set ttimeoutlen=50
set visualbell
set wildmenu
set textwidth=0
let mapleader = ","
let maplocalleader = "å"
nnoremap <space> :
vnoremap <space> :

" break stupid habit
nnoremap : <nop>

" colorscheme
colorscheme molokai

" font
let fontfamily = 'PragmataPro'
let fontsize = 12
let &guifont = fontfamily . ':h' . fontsize
nnoremap <silent> <leader>0 :<c-u>let &guifont = fontfamily . ':h' . (v:count ? v:count : fontsize)<enter>

" powerline
let g:Powerline_symbols = 'fancy'
set laststatus=2
set noshowmode

" nerdtree
nnoremap <leader>f :NERDTreeToggle<enter>

" supertab
let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" jedi
autocmd FileType python setlocal completeopt-=preview
let g:jedi#popup_on_dot = 0

" pandoc
let g:pandoc#folding#fdc = 0
nnoremap <leader>p :Pandoc pdf --template=~/Dropbox/Settings/Pandoc/custom.latex<enter>

" omnisharp (ftplugin/cs.vim)
set completeopt=longest,menuone,preview
set splitbelow

" diff settings
set diffopt=filler,vertical
"
" buffers
set hidden
nnoremap <leader>a :buffer #<enter>

" vimrc edit and reload
nnoremap <leader>ev :tabedit ~/.vimrc<enter>
nnoremap <leader>egv :tabedit ~/.gvimrc<enter>
autocmd! bufwritepost ~/.vimrc nested source %
autocmd! bufwritepost ~/.gvimrc nested source %

" mouse
set mouse=a
if !has("gui_running")
	noremap <scrollwheelup> <c-y>
	noremap <scrollwheeldown> <c-e>
	inoremap <scrollwheelup> <c-x><c-y>
	inoremap <scrollwheeldown> <c-x><c-e>
end

" cursor
set cursorline
set guicursor=n:blinkon0

" backup
set nobackup
set noswapfile

" backspace behavior
set backspace=indent,eol,start

" line numbers
set number
set relativenumber
set numberwidth=3

" folding
set foldmethod=syntax
autocmd Syntax * normal zR

" listchars
set list
set listchars=tab:\ \ ,precedes:‹,extends:›,trail:·,nbsp:·

" indentation
set tabstop=4
set shiftwidth=4
"inoremap <c-tab> <tab>
"nnoremap <leader><tab> :let @" = "<tab>"<enter>
nnoremap <tab> a<c-t><esc>
nnoremap <s-tab> a<c-d><esc>
"inoremap <tab> <c-t>
"inoremap <s-tab> <c-d>
xnoremap <tab> :call <sid>visualmodeindent(1)<enter>
xnoremap <s-tab> :call <sid>visualmodeindent(0)<enter>
function! <sid>visualmodeindent(right)
	let l:lnum = getpos('.')[1]
	let [l:bufnum1, l:lnum1, l:col1, l:off1] = getpos("'<")
	let [l:bufnum2, l:lnum2, l:col2, l:off2] = getpos("'>")
	if l:lnum == l:lnum1 || l:lnum == l:lnum2
		let l:lead1 = matchend(getline('.'), "^\\s*")
	end
	if a:right > 0
		>
	else
		<
	end
	if l:lnum == l:lnum1 || l:lnum == l:lnum2
		let l:lead2 = matchend(getline('.'), "^\\s*")
		let l:offset = l:lead2 - l:lead1
		if l:lnum == l:lnum1
			call setpos("'<", [l:bufnum1, l:lnum1, l:col1 + l:offset, l:off1])
		else
			call setpos("'>", [l:bufnum2, l:lnum2, l:col2 + l:offset, l:off2])
			normal gv
		end
	end
endfunction

" wildmenu
set wildmenu
set wildmode=longest:full,full

" completion
set complete=.,w,b,u,t,i

" word wrapping
set nowrap
set sidescroll=1
set sidescrolloff=1

" search
set hlsearch
set incsearch
set ignorecase
set smartcase
nnoremap - /
nnoremap -- //
nnoremap _ ?
nnoremap __ ??
nnoremap <leader><space> :nohlsearch<enter>
nohlsearch

" trailing whitespace color
highlight showtrailingwhitespace ctermbg=red guibg=#9f0a0a

" window management
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
"nnoremap <silent> <c-space> :call s:maximizetoggle()<enter>
"nnoremap <silent> <nul> :call s:maximizetoggle()<enter>
"function! s:maximizetoggle()
"    if exists("s:maximize_session")
"        exec "source " . s:maximize_session
"        call delete(s:maximize_session)
"        unlet s:maximize_session
"        let &hidden = s:maximize_hidden_save
"        unlet s:maximize_hidden_save
"    else
"        let s:maximize_hidden_save = &hidden
"        let s:maximize_session = tempname()
"        set hidden
"        exec "mksession! " . s:maximize_session
"        only
"    endif
"endfunction

" format options
autocmd BufWinEnter,BufNewFile * setlocal formatoptions=q

" show syntax group
nnoremap <leader>s :call <sid>syntaxstack()<enter>
function! <sid>syntaxstack()
	if !exists("*synstack")
		return
	endif
	echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

